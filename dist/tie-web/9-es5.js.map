{"version":3,"sources":["src/app/auth/reset-password/reset-password.component.html","src/app/auth/reset-password/reset-password-routing.module.ts","src/app/auth/reset-password/reset-password.component.scss","src/app/auth/reset-password/reset-password.component.ts","src/app/auth/reset-password/reset-password.module.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<div class=\\\"main_bg\\\">\\n    <div class=\\\"fixed-nav\\\">\\n        <ul>\\n            <li></li>\\n            <li></li>\\n            <li class=\\\"active\\\"></li>\\n        </ul>\\n    </div>\\n    <div class=\\\"container-fluid\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-6 main-left\\\">\\n                <div class=\\\"full-vertical\\\">\\n                    <img class=\\\"on_board\\\" src=\\\"assets/images/img_onboard_3.png\\\" alt=\\\"Login\\\">\\n                    <div class=\\\"head\\\">boost your reputation with <span>reviews</span></div>\\n                </div>\\n            </div>\\n            <div class=\\\"col-md-6 main-right\\\">\\n                <div class=\\\"fixed-back\\\"><a [routerLink]=\\\"['/auth']\\\"><i class=\\\"fa fa-angle-left\\\"></i></a></div>\\n                <div class=\\\"fixed-select\\\">\\n                    <button mat-button [matMenuTriggerFor]=\\\"lan_menu\\\" [disableRipple]=\\\"true\\\">En <img src=\\\"assets/images/flag_en.png\\\" alt=\\\"England\\\"><img class=\\\"drop_img\\\" src=\\\"assets/images/dropdown.png\\\" alt=\\\"\\\"></button>\\n                    <mat-menu #lan_menu=\\\"matMenu\\\" xPosition=\\\"before\\\">\\n                        <button mat-menu-item>Ar <img src=\\\"assets/images/flag_ar.png\\\" alt=\\\"England\\\"></button>\\n                    </mat-menu>\\n                </div>\\n                <div class=\\\"full-vertical custom-width\\\">\\n                    <div class=\\\"logo\\\"><img src=\\\"assets/images/tie_logo_black.png\\\" alt=\\\"Logo\\\"></div>\\n                    <h1 class=\\\"head\\\">Reset Password</h1>\\n                    <p class=\\\"text-center\\\">Please enter your new password</p>\\n                    <div class=\\\"login-form\\\">\\n                        <form name=\\\"reset\\\" (ngSubmit)=\\\"resetPassword()\\\" [formGroup]=\\\"reset\\\">\\n                            <mat-form-field>\\n                                <span class=\\\"email-img pass\\\"><img src=\\\"assets/images/lock.png\\\" alt=\\\"envelope\\\"></span>\\n                                <input matInput placeholder=\\\"New Password\\\" [type]=\\\"nhide ? 'password' : 'text'\\\"\\n                                    maxlength=\\\"20\\\" (keydown.space)=\\\"$event.preventDefault()\\\"\\n                                    formControlName='newPassword' class=\\\"form-control\\\">\\n                                <button type=\\\"button\\\" mat-icon-button matSuffix (click)=\\\"nhide = !nhide\\\"\\n                                    [attr.aria-label]=\\\"'Hide password'\\\" [attr.aria-pressed]=\\\"hide\\\">\\n                                    <mat-icon>{{nhide ? 'visibility_off' : 'visibility'}}</mat-icon>\\n                                </button>\\n                            </mat-form-field>\\n                            <div\\n                                *ngIf=\\\"(submitted || getControl.newPassword.dirty|| getControl.newPassword.touched) && getControl.newPassword.errors\\\">\\n                                <p class=\\\"color\\\" *ngIf=\\\"getControl.newPassword.errors.required\\\">{{'RESETPASSREQ'| translate}}\\n                                </p>\\n                                <p class=\\\"color\\\" *ngIf=\\\"getControl.newPassword.errors.minlength \\\">{{'PASSPATTERN'| translate}}</p>\\n                                <span *ngIf=\\\"!getControl.newPassword.errors.minlength\\\">\\n                                    <p class=\\\"color\\\" *ngIf=\\\"getControl.newPassword.errors.pattern\\\">{{'PASSPATTERN'| translate}}</p>\\n                                </span>\\n                            </div>\\n                            <mat-form-field>\\n                                <span class=\\\"email-img pass\\\"><img src=\\\"assets/images/lock.png\\\" alt=\\\"envelope\\\"></span>\\n                                <input matInput placeholder=\\\"Confirm Password\\\" [type]=\\\"chide ? 'password' : 'text'\\\"\\n                                    maxlength=\\\"20\\\" (keydown.space)=\\\"$event.preventDefault()\\\"\\n                                    formControlName='confirmPassword' class=\\\"form-control\\\">\\n                                <button type=\\\"button\\\" mat-icon-button matSuffix (click)=\\\"chide = !chide\\\"\\n                                    [attr.aria-label]=\\\"'Hide password'\\\" [attr.aria-pressed]=\\\"hide\\\">\\n                                    <mat-icon>{{chide ? 'visibility_off' : 'visibility'}}</mat-icon>\\n                                </button>\\n                            </mat-form-field>\\n                            <div\\n                                *ngIf=\\\"(submitted || getControl.confirmPassword.dirty|| getControl.confirmPassword.touched) && getControl.confirmPassword.errors\\\">\\n                                <p class=\\\"color\\\" *ngIf=\\\"getControl.confirmPassword.errors.required\\\">{{'RESETPASSCNFREQ'| translate}}</p>\\n                                <span *ngIf=\\\"!getControl.confirmPassword.errors.required\\\">\\n                                    <p class=\\\"color\\\" *ngIf=\\\"getControl.confirmPassword.invalid\\\">{{'RESETPASSNOTMATCH'| translate}}</p>\\n                                </span>\\n                            </div>\\n                            <button type=\\\"submit\\\" class=\\\"btn btn-submit\\\">Reset</button>\\n                        </form>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ResetPasswordComponent } from './reset-password.component';\n\n\nconst routes: Routes = [{\n  path:'', component: ResetPasswordComponent\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ResetPasswordRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvcmVzZXQtcGFzc3dvcmQvcmVzZXQtcGFzc3dvcmQuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { HttpRequestService } from 'src/app/shared/service/http-request.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { PassValid, ValidationService, passValidator } from 'src/app/shared/service/validation-service';\nimport { ErrorService } from 'src/app/shared/service/error.service';\nimport { TranslatePipe } from 'src/app/shared/_pipes/translate.pipe';\n\n\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss']\n})\n\nexport class ResetPasswordComponent implements OnInit {\n  unsubscribeAll: Subject<any>;\n  chide = true;\n  nhide = true;\n  reset: FormGroup;\n  submitted: boolean;\n  token: string;\n  isLoading = false;\n  passShow = true;\n  cPassShow = true;\n  public formData = new FormData();\n  constructor(private httpService: HttpRequestService, \n    private router: Router, private fb: FormBuilder, \n    private routes: ActivatedRoute, private error: ErrorService, private trns: TranslatePipe) {\n    this.unsubscribeAll = new Subject;\n  }\n\n  ngOnInit() {\n    this.token = this.routes.snapshot.params.token;\n    if (this.token)\n      this.token = this.token.replace(/\\s/g, \"+\");\n\n    this.reset = this.fb.group({\n      newPassword: new FormControl(null, [\n        Validators.required, Validators.minLength(6),\n        ValidationService.passwordValidator\n      ]),\n      confirmPassword: new FormControl(null, [Validators.required, passValidator])\n    }\n    );\n\n    this.reset.get('newPassword').valueChanges\n      .pipe(takeUntil(this.unsubscribeAll))\n      .subscribe(() => {\n        this.reset.get('confirmPassword').updateValueAndValidity();\n      });\n  }\n  get getControl() { return this.reset.controls; }\n\n  resetPassword() {\n    console.log(this.getControl.confirmPassword.errors);\n    \n    this.isLoading = true;\n    this.submitted = true;\n    if (this.reset.invalid) {\n      this.isLoading = false;\n    } else {\n      this.httpService.getRequest('POST', 'RESET', { pass: this.reset.value.newPassword, tkn: this.token }).subscribe((response: any) => {\n        if (response.status === 1) {\n          this.isLoading = false;\n          this.router.navigateByUrl('/auth')\n            .then(() => {\n              this.httpService.sucsTostr(this.trns.transform('SUCCESS'), this.trns.transform('RESETPASSSUCC'))\n            });\n        } else {\n          if (response.error) {\n              this.error.handleError(response.err.errCode)\n          } else {\n            this.error.handleError(0)\n          }\n        }\n      }, err=>{\n        this.error.handleError(0)\n      });\n    }\n  }\n\n\n\n  ngDestroy() {\n    this.unsubscribeAll.next();\n    this.unsubscribeAll.complete();\n  }\n\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ResetPasswordRoutingModule } from './reset-password-routing.module';\nimport { ResetPasswordComponent } from './reset-password.component';\nimport { MaterialModule } from 'src/app/shared/material/material.module';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ApplicationpipeModule } from 'src/app/shared/module/applicationpipe/applicationpipe.module';\nimport { TranslatePipe } from 'src/app/shared/_pipes/translate.pipe';\n\n\n@NgModule({\n  declarations: [ResetPasswordComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ResetPasswordRoutingModule,\n    MaterialModule,\n    SharedModule,\n    ApplicationpipeModule\n  ],\n  providers:[TranslatePipe],\n  schemas: [ CUSTOM_ELEMENTS_SCHEMA ],\n})\nexport class ResetPasswordModule { }\n"],"sourceRoot":"webpack:///","file":"9-es5.js"}